// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// setMarker_GlobalVarsInCPP
void setMarker_GlobalVarsInCPP(std::string t_impute_method, double t_missing_cutoff, double t_min_maf_marker, double t_min_mac_marker, double t_min_info_marker, unsigned int t_omp_num_threads, bool t_isOutputMoreDetails, int t_marker_chunksize, double g_dosage_zerod_cutoff, double g_dosage_zerod_MAC_cutoff);
RcppExport SEXP _SAIGE_setMarker_GlobalVarsInCPP(SEXP t_impute_methodSEXP, SEXP t_missing_cutoffSEXP, SEXP t_min_maf_markerSEXP, SEXP t_min_mac_markerSEXP, SEXP t_min_info_markerSEXP, SEXP t_omp_num_threadsSEXP, SEXP t_isOutputMoreDetailsSEXP, SEXP t_marker_chunksizeSEXP, SEXP g_dosage_zerod_cutoffSEXP, SEXP g_dosage_zerod_MAC_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type t_impute_method(t_impute_methodSEXP);
    Rcpp::traits::input_parameter< double >::type t_missing_cutoff(t_missing_cutoffSEXP);
    Rcpp::traits::input_parameter< double >::type t_min_maf_marker(t_min_maf_markerSEXP);
    Rcpp::traits::input_parameter< double >::type t_min_mac_marker(t_min_mac_markerSEXP);
    Rcpp::traits::input_parameter< double >::type t_min_info_marker(t_min_info_markerSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type t_omp_num_threads(t_omp_num_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type t_isOutputMoreDetails(t_isOutputMoreDetailsSEXP);
    Rcpp::traits::input_parameter< int >::type t_marker_chunksize(t_marker_chunksizeSEXP);
    Rcpp::traits::input_parameter< double >::type g_dosage_zerod_cutoff(g_dosage_zerod_cutoffSEXP);
    Rcpp::traits::input_parameter< double >::type g_dosage_zerod_MAC_cutoff(g_dosage_zerod_MAC_cutoffSEXP);
    setMarker_GlobalVarsInCPP(t_impute_method, t_missing_cutoff, t_min_maf_marker, t_min_mac_marker, t_min_info_marker, t_omp_num_threads, t_isOutputMoreDetails, t_marker_chunksize, g_dosage_zerod_cutoff, g_dosage_zerod_MAC_cutoff);
    return R_NilValue;
END_RCPP
}
// setRegion_GlobalVarsInCPP
void setRegion_GlobalVarsInCPP(std::string t_impute_method, double t_missing_cutoff, arma::vec t_max_maf_region, unsigned int t_max_markers_region, unsigned int t_omp_num_threads, std::string t_method_to_CollapseUltraRare, double t_MACCutoff_to_CollapseUltraRare, double t_DosageCutoff_for_UltraRarePresence, double g_dosage_zerod_cutoff, double g_dosage_zerod_MAC_cutoff);
RcppExport SEXP _SAIGE_setRegion_GlobalVarsInCPP(SEXP t_impute_methodSEXP, SEXP t_missing_cutoffSEXP, SEXP t_max_maf_regionSEXP, SEXP t_max_markers_regionSEXP, SEXP t_omp_num_threadsSEXP, SEXP t_method_to_CollapseUltraRareSEXP, SEXP t_MACCutoff_to_CollapseUltraRareSEXP, SEXP t_DosageCutoff_for_UltraRarePresenceSEXP, SEXP g_dosage_zerod_cutoffSEXP, SEXP g_dosage_zerod_MAC_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type t_impute_method(t_impute_methodSEXP);
    Rcpp::traits::input_parameter< double >::type t_missing_cutoff(t_missing_cutoffSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t_max_maf_region(t_max_maf_regionSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type t_max_markers_region(t_max_markers_regionSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type t_omp_num_threads(t_omp_num_threadsSEXP);
    Rcpp::traits::input_parameter< std::string >::type t_method_to_CollapseUltraRare(t_method_to_CollapseUltraRareSEXP);
    Rcpp::traits::input_parameter< double >::type t_MACCutoff_to_CollapseUltraRare(t_MACCutoff_to_CollapseUltraRareSEXP);
    Rcpp::traits::input_parameter< double >::type t_DosageCutoff_for_UltraRarePresence(t_DosageCutoff_for_UltraRarePresenceSEXP);
    Rcpp::traits::input_parameter< double >::type g_dosage_zerod_cutoff(g_dosage_zerod_cutoffSEXP);
    Rcpp::traits::input_parameter< double >::type g_dosage_zerod_MAC_cutoff(g_dosage_zerod_MAC_cutoffSEXP);
    setRegion_GlobalVarsInCPP(t_impute_method, t_missing_cutoff, t_max_maf_region, t_max_markers_region, t_omp_num_threads, t_method_to_CollapseUltraRare, t_MACCutoff_to_CollapseUltraRare, t_DosageCutoff_for_UltraRarePresence, g_dosage_zerod_cutoff, g_dosage_zerod_MAC_cutoff);
    return R_NilValue;
END_RCPP
}
// mainMarkerInCPP
Rcpp::List mainMarkerInCPP(std::string t_genoType, std::string t_traitType, arma::ivec& t_genoIndex, bool t_isMoreOutput);
RcppExport SEXP _SAIGE_mainMarkerInCPP(SEXP t_genoTypeSEXP, SEXP t_traitTypeSEXP, SEXP t_genoIndexSEXP, SEXP t_isMoreOutputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type t_genoType(t_genoTypeSEXP);
    Rcpp::traits::input_parameter< std::string >::type t_traitType(t_traitTypeSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type t_genoIndex(t_genoIndexSEXP);
    Rcpp::traits::input_parameter< bool >::type t_isMoreOutput(t_isMoreOutputSEXP);
    rcpp_result_gen = Rcpp::wrap(mainMarkerInCPP(t_genoType, t_traitType, t_genoIndex, t_isMoreOutput));
    return rcpp_result_gen;
END_RCPP
}
// setPLINKobjInCPP
void setPLINKobjInCPP(std::string t_bimFile, std::string t_famFile, std::string t_bedFile, std::vector<std::string>& t_SampleInModel, std::string t_AlleleOrder);
RcppExport SEXP _SAIGE_setPLINKobjInCPP(SEXP t_bimFileSEXP, SEXP t_famFileSEXP, SEXP t_bedFileSEXP, SEXP t_SampleInModelSEXP, SEXP t_AlleleOrderSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type t_bimFile(t_bimFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type t_famFile(t_famFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type t_bedFile(t_bedFileSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type t_SampleInModel(t_SampleInModelSEXP);
    Rcpp::traits::input_parameter< std::string >::type t_AlleleOrder(t_AlleleOrderSEXP);
    setPLINKobjInCPP(t_bimFile, t_famFile, t_bedFile, t_SampleInModel, t_AlleleOrder);
    return R_NilValue;
END_RCPP
}
// setBGENobjInCPP
void setBGENobjInCPP(std::string t_bgenFileName, std::string t_bgenFileIndex, std::vector<std::string>& t_SampleInBgen, std::vector<std::string>& t_SampleInModel, std::string t_AlleleOrder);
RcppExport SEXP _SAIGE_setBGENobjInCPP(SEXP t_bgenFileNameSEXP, SEXP t_bgenFileIndexSEXP, SEXP t_SampleInBgenSEXP, SEXP t_SampleInModelSEXP, SEXP t_AlleleOrderSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type t_bgenFileName(t_bgenFileNameSEXP);
    Rcpp::traits::input_parameter< std::string >::type t_bgenFileIndex(t_bgenFileIndexSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type t_SampleInBgen(t_SampleInBgenSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type t_SampleInModel(t_SampleInModelSEXP);
    Rcpp::traits::input_parameter< std::string >::type t_AlleleOrder(t_AlleleOrderSEXP);
    setBGENobjInCPP(t_bgenFileName, t_bgenFileIndex, t_SampleInBgen, t_SampleInModel, t_AlleleOrder);
    return R_NilValue;
END_RCPP
}
// setSAIGEobjInCPP
void setSAIGEobjInCPP(arma::mat& t_XVX, arma::mat& t_XXVX_inv, arma::mat& t_XV, arma::mat& t_XVX_inv_XV, arma::mat& t_X, arma::vec& t_S_a, arma::vec& t_res, arma::vec& t_mu2, arma::vec& t_mu, arma::vec& t_varRatio, arma::vec& t_cateVarRatioMinMACVecExclude, arma::vec& t_cateVarRatioMaxMACVecInclude, double t_SPA_Cutoff, arma::vec& t_tauvec, std::string t_traitType, arma::vec& t_y, std::string t_impute_method, bool t_flagSparseGRM, arma::umat& t_locationMat, arma::vec& t_valueVec, int t_dimNum, bool t_isCondition, std::vector<uint32_t>& t_condition_genoIndex);
RcppExport SEXP _SAIGE_setSAIGEobjInCPP(SEXP t_XVXSEXP, SEXP t_XXVX_invSEXP, SEXP t_XVSEXP, SEXP t_XVX_inv_XVSEXP, SEXP t_XSEXP, SEXP t_S_aSEXP, SEXP t_resSEXP, SEXP t_mu2SEXP, SEXP t_muSEXP, SEXP t_varRatioSEXP, SEXP t_cateVarRatioMinMACVecExcludeSEXP, SEXP t_cateVarRatioMaxMACVecIncludeSEXP, SEXP t_SPA_CutoffSEXP, SEXP t_tauvecSEXP, SEXP t_traitTypeSEXP, SEXP t_ySEXP, SEXP t_impute_methodSEXP, SEXP t_flagSparseGRMSEXP, SEXP t_locationMatSEXP, SEXP t_valueVecSEXP, SEXP t_dimNumSEXP, SEXP t_isConditionSEXP, SEXP t_condition_genoIndexSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type t_XVX(t_XVXSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type t_XXVX_inv(t_XXVX_invSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type t_XV(t_XVSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type t_XVX_inv_XV(t_XVX_inv_XVSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type t_X(t_XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type t_S_a(t_S_aSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type t_res(t_resSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type t_mu2(t_mu2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type t_mu(t_muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type t_varRatio(t_varRatioSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type t_cateVarRatioMinMACVecExclude(t_cateVarRatioMinMACVecExcludeSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type t_cateVarRatioMaxMACVecInclude(t_cateVarRatioMaxMACVecIncludeSEXP);
    Rcpp::traits::input_parameter< double >::type t_SPA_Cutoff(t_SPA_CutoffSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type t_tauvec(t_tauvecSEXP);
    Rcpp::traits::input_parameter< std::string >::type t_traitType(t_traitTypeSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type t_y(t_ySEXP);
    Rcpp::traits::input_parameter< std::string >::type t_impute_method(t_impute_methodSEXP);
    Rcpp::traits::input_parameter< bool >::type t_flagSparseGRM(t_flagSparseGRMSEXP);
    Rcpp::traits::input_parameter< arma::umat& >::type t_locationMat(t_locationMatSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type t_valueVec(t_valueVecSEXP);
    Rcpp::traits::input_parameter< int >::type t_dimNum(t_dimNumSEXP);
    Rcpp::traits::input_parameter< bool >::type t_isCondition(t_isConditionSEXP);
    Rcpp::traits::input_parameter< std::vector<uint32_t>& >::type t_condition_genoIndex(t_condition_genoIndexSEXP);
    setSAIGEobjInCPP(t_XVX, t_XXVX_inv, t_XV, t_XVX_inv_XV, t_X, t_S_a, t_res, t_mu2, t_mu, t_varRatio, t_cateVarRatioMinMACVecExclude, t_cateVarRatioMaxMACVecInclude, t_SPA_Cutoff, t_tauvec, t_traitType, t_y, t_impute_method, t_flagSparseGRM, t_locationMat, t_valueVec, t_dimNum, t_isCondition, t_condition_genoIndex);
    return R_NilValue;
END_RCPP
}
// setSparseSigmaInCPP
void setSparseSigmaInCPP(int r, arma::umat& t_locationMatinR, arma::vec& t_valueVecinR);
RcppExport SEXP _SAIGE_setSparseSigmaInCPP(SEXP rSEXP, SEXP t_locationMatinRSEXP, SEXP t_valueVecinRSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< arma::umat& >::type t_locationMatinR(t_locationMatinRSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type t_valueVecinR(t_valueVecinRSEXP);
    setSparseSigmaInCPP(r, t_locationMatinR, t_valueVecinR);
    return R_NilValue;
END_RCPP
}
// RegionSetUpConditional_binary_InCPP
Rcpp::List RegionSetUpConditional_binary_InCPP();
RcppExport SEXP _SAIGE_RegionSetUpConditional_binary_InCPP() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(RegionSetUpConditional_binary_InCPP());
    return rcpp_result_gen;
END_RCPP
}
// mainRegionInCPP
Rcpp::List mainRegionInCPP(std::string t_genoType, std::vector<uint32_t>& t_genoIndex, arma::mat& annoIndicatorMat, arma::vec& maxMAFVec, std::string t_outputFile, std::string t_traitType, unsigned int t_n, arma::mat P1Mat, arma::mat P2Mat);
RcppExport SEXP _SAIGE_mainRegionInCPP(SEXP t_genoTypeSEXP, SEXP t_genoIndexSEXP, SEXP annoIndicatorMatSEXP, SEXP maxMAFVecSEXP, SEXP t_outputFileSEXP, SEXP t_traitTypeSEXP, SEXP t_nSEXP, SEXP P1MatSEXP, SEXP P2MatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type t_genoType(t_genoTypeSEXP);
    Rcpp::traits::input_parameter< std::vector<uint32_t>& >::type t_genoIndex(t_genoIndexSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type annoIndicatorMat(annoIndicatorMatSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type maxMAFVec(maxMAFVecSEXP);
    Rcpp::traits::input_parameter< std::string >::type t_outputFile(t_outputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type t_traitType(t_traitTypeSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type t_n(t_nSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type P1Mat(P1MatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type P2Mat(P2MatSEXP);
    rcpp_result_gen = Rcpp::wrap(mainRegionInCPP(t_genoType, t_genoIndex, annoIndicatorMat, maxMAFVec, t_outputFile, t_traitType, t_n, P1Mat, P2Mat));
    return rcpp_result_gen;
END_RCPP
}
// assign_conditionMarkers_factors
void assign_conditionMarkers_factors(std::string t_genoType, std::vector<uint32_t>& t_genoIndex, unsigned int t_n);
RcppExport SEXP _SAIGE_assign_conditionMarkers_factors(SEXP t_genoTypeSEXP, SEXP t_genoIndexSEXP, SEXP t_nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type t_genoType(t_genoTypeSEXP);
    Rcpp::traits::input_parameter< std::vector<uint32_t>& >::type t_genoIndex(t_genoIndexSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type t_n(t_nSEXP);
    assign_conditionMarkers_factors(t_genoType, t_genoIndex, t_n);
    return R_NilValue;
END_RCPP
}
// assign_conditionMarkers_factors_binary_region
void assign_conditionMarkers_factors_binary_region(arma::vec& scalefactor_G2_cond);
RcppExport SEXP _SAIGE_assign_conditionMarkers_factors_binary_region(SEXP scalefactor_G2_condSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type scalefactor_G2_cond(scalefactor_G2_condSEXP);
    assign_conditionMarkers_factors_binary_region(scalefactor_G2_cond);
    return R_NilValue;
END_RCPP
}
// SPA
void SPA(arma::vec& mu, arma::vec& g, double q, double qinv, double pval_noadj, double tol, bool logp, std::string traitType, double& pval, bool& isSPAConverge);
RcppExport SEXP _SAIGE_SPA(SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP qinvSEXP, SEXP pval_noadjSEXP, SEXP tolSEXP, SEXP logpSEXP, SEXP traitTypeSEXP, SEXP pvalSEXP, SEXP isSPAConvergeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type qinv(qinvSEXP);
    Rcpp::traits::input_parameter< double >::type pval_noadj(pval_noadjSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    Rcpp::traits::input_parameter< std::string >::type traitType(traitTypeSEXP);
    Rcpp::traits::input_parameter< double& >::type pval(pvalSEXP);
    Rcpp::traits::input_parameter< bool& >::type isSPAConverge(isSPAConvergeSEXP);
    SPA(mu, g, q, qinv, pval_noadj, tol, logp, traitType, pval, isSPAConverge);
    return R_NilValue;
END_RCPP
}
// SPA_fast
void SPA_fast(arma::vec& mu, arma::vec& g, double q, double qinv, double pval_noadj, bool logp, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma, double tol, std::string traitType, double& pval, bool& isSPAConverge);
RcppExport SEXP _SAIGE_SPA_fast(SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP qinvSEXP, SEXP pval_noadjSEXP, SEXP logpSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP, SEXP tolSEXP, SEXP traitTypeSEXP, SEXP pvalSEXP, SEXP isSPAConvergeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type qinv(qinvSEXP);
    Rcpp::traits::input_parameter< double >::type pval_noadj(pval_noadjSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< std::string >::type traitType(traitTypeSEXP);
    Rcpp::traits::input_parameter< double& >::type pval(pvalSEXP);
    Rcpp::traits::input_parameter< bool& >::type isSPAConverge(isSPAConvergeSEXP);
    SPA_fast(mu, g, q, qinv, pval_noadj, logp, gNA, gNB, muNA, muNB, NAmu, NAsigma, tol, traitType, pval, isSPAConverge);
    return R_NilValue;
END_RCPP
}
// Korg_Binom
double Korg_Binom(double t1, arma::vec& mu, arma::vec& g);
RcppExport SEXP _SAIGE_Korg_Binom(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(Korg_Binom(t1, mu, g));
    return rcpp_result_gen;
END_RCPP
}
// K1_adj_Binom
double K1_adj_Binom(double t1, arma::vec& mu, arma::vec& g, double q);
RcppExport SEXP _SAIGE_K1_adj_Binom(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(K1_adj_Binom(t1, mu, g, q));
    return rcpp_result_gen;
END_RCPP
}
// K2_Binom
double K2_Binom(double t1, arma::vec& mu, arma::vec& g);
RcppExport SEXP _SAIGE_K2_Binom(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(K2_Binom(t1, mu, g));
    return rcpp_result_gen;
END_RCPP
}
// getroot_K1_Binom
Rcpp::List getroot_K1_Binom(double init, arma::vec& mu, arma::vec& g, double q, double tol, int maxiter);
RcppExport SEXP _SAIGE_getroot_K1_Binom(SEXP initSEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP tolSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type init(initSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(getroot_K1_Binom(init, mu, g, q, tol, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// Get_Saddle_Prob_Binom
Rcpp::List Get_Saddle_Prob_Binom(double zeta, arma::vec& mu, arma::vec& g, double q, bool logp);
RcppExport SEXP _SAIGE_Get_Saddle_Prob_Binom(SEXP zetaSEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_Saddle_Prob_Binom(zeta, mu, g, q, logp));
    return rcpp_result_gen;
END_RCPP
}
// SPA_binary
Rcpp::List SPA_binary(arma::vec& mu, arma::vec& g, double q, double qinv, double pval_noadj, double tol, bool logp);
RcppExport SEXP _SAIGE_SPA_binary(SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP qinvSEXP, SEXP pval_noadjSEXP, SEXP tolSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type qinv(qinvSEXP);
    Rcpp::traits::input_parameter< double >::type pval_noadj(pval_noadjSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(SPA_binary(mu, g, q, qinv, pval_noadj, tol, logp));
    return rcpp_result_gen;
END_RCPP
}
// Korg_fast_Binom
double Korg_fast_Binom(double t1, arma::vec& mu, arma::vec& g, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma);
RcppExport SEXP _SAIGE_Korg_fast_Binom(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(Korg_fast_Binom(t1, mu, g, gNA, gNB, muNA, muNB, NAmu, NAsigma));
    return rcpp_result_gen;
END_RCPP
}
// K1_adj_fast_Binom
double K1_adj_fast_Binom(double t1, arma::vec& mu, arma::vec& g, double q, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma);
RcppExport SEXP _SAIGE_K1_adj_fast_Binom(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(K1_adj_fast_Binom(t1, mu, g, q, gNA, gNB, muNA, muNB, NAmu, NAsigma));
    return rcpp_result_gen;
END_RCPP
}
// K2_fast_Binom
double K2_fast_Binom(double t1, arma::vec& mu, arma::vec& g, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma);
RcppExport SEXP _SAIGE_K2_fast_Binom(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(K2_fast_Binom(t1, mu, g, gNA, gNB, muNA, muNB, NAmu, NAsigma));
    return rcpp_result_gen;
END_RCPP
}
// getroot_K1_fast_Binom
Rcpp::List getroot_K1_fast_Binom(double init, arma::vec& mu, arma::vec& g, double q, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma, double tol, int maxiter);
RcppExport SEXP _SAIGE_getroot_K1_fast_Binom(SEXP initSEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP, SEXP tolSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type init(initSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(getroot_K1_fast_Binom(init, mu, g, q, gNA, gNB, muNA, muNB, NAmu, NAsigma, tol, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// Get_Saddle_Prob_fast_Binom
Rcpp::List Get_Saddle_Prob_fast_Binom(double zeta, arma::vec& mu, arma::vec& g, double q, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma, bool logp);
RcppExport SEXP _SAIGE_Get_Saddle_Prob_fast_Binom(SEXP zetaSEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_Saddle_Prob_fast_Binom(zeta, mu, g, q, gNA, gNB, muNA, muNB, NAmu, NAsigma, logp));
    return rcpp_result_gen;
END_RCPP
}
// SPA_binary_fast
Rcpp::List SPA_binary_fast(arma::vec& mu, arma::vec& g, double q, double qinv, double pval_noadj, bool logp, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma, double tol);
RcppExport SEXP _SAIGE_SPA_binary_fast(SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP qinvSEXP, SEXP pval_noadjSEXP, SEXP logpSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type qinv(qinvSEXP);
    Rcpp::traits::input_parameter< double >::type pval_noadj(pval_noadjSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(SPA_binary_fast(mu, g, q, qinv, pval_noadj, logp, gNA, gNB, muNA, muNB, NAmu, NAsigma, tol));
    return rcpp_result_gen;
END_RCPP
}
// Korg_Poi
double Korg_Poi(double t1, arma::vec& mu, arma::vec& g);
RcppExport SEXP _SAIGE_Korg_Poi(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(Korg_Poi(t1, mu, g));
    return rcpp_result_gen;
END_RCPP
}
// K1_adj_Poi
double K1_adj_Poi(double t1, arma::vec& mu, arma::vec& g, double q);
RcppExport SEXP _SAIGE_K1_adj_Poi(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(K1_adj_Poi(t1, mu, g, q));
    return rcpp_result_gen;
END_RCPP
}
// K2_Poi
double K2_Poi(double t1, arma::vec& mu, arma::vec& g);
RcppExport SEXP _SAIGE_K2_Poi(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(K2_Poi(t1, mu, g));
    return rcpp_result_gen;
END_RCPP
}
// getroot_K1_Poi
Rcpp::List getroot_K1_Poi(double init, arma::vec& mu, arma::vec& g, double q, double tol, int maxiter);
RcppExport SEXP _SAIGE_getroot_K1_Poi(SEXP initSEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP tolSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type init(initSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(getroot_K1_Poi(init, mu, g, q, tol, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// Get_Saddle_Prob_Poi
Rcpp::List Get_Saddle_Prob_Poi(double zeta, arma::vec& mu, arma::vec& g, double q, bool logp);
RcppExport SEXP _SAIGE_Get_Saddle_Prob_Poi(SEXP zetaSEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_Saddle_Prob_Poi(zeta, mu, g, q, logp));
    return rcpp_result_gen;
END_RCPP
}
// SPA_survival
Rcpp::List SPA_survival(arma::vec& mu, arma::vec& g, double q, double qinv, double pval_noadj, double tol, bool logp);
RcppExport SEXP _SAIGE_SPA_survival(SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP qinvSEXP, SEXP pval_noadjSEXP, SEXP tolSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type qinv(qinvSEXP);
    Rcpp::traits::input_parameter< double >::type pval_noadj(pval_noadjSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(SPA_survival(mu, g, q, qinv, pval_noadj, tol, logp));
    return rcpp_result_gen;
END_RCPP
}
// Korg_fast_Poi
double Korg_fast_Poi(double t1, arma::vec& mu, arma::vec& g, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma);
RcppExport SEXP _SAIGE_Korg_fast_Poi(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(Korg_fast_Poi(t1, mu, g, gNA, gNB, muNA, muNB, NAmu, NAsigma));
    return rcpp_result_gen;
END_RCPP
}
// K1_adj_fast_Poi
double K1_adj_fast_Poi(double t1, arma::vec& mu, arma::vec& g, double q, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma);
RcppExport SEXP _SAIGE_K1_adj_fast_Poi(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(K1_adj_fast_Poi(t1, mu, g, q, gNA, gNB, muNA, muNB, NAmu, NAsigma));
    return rcpp_result_gen;
END_RCPP
}
// K2_fast_Poi
double K2_fast_Poi(double t1, arma::vec& mu, arma::vec& g, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma);
RcppExport SEXP _SAIGE_K2_fast_Poi(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(K2_fast_Poi(t1, mu, g, gNA, gNB, muNA, muNB, NAmu, NAsigma));
    return rcpp_result_gen;
END_RCPP
}
// getroot_K1_fast_Poi
Rcpp::List getroot_K1_fast_Poi(double init, arma::vec& mu, arma::vec& g, double q, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma, double tol, int maxiter);
RcppExport SEXP _SAIGE_getroot_K1_fast_Poi(SEXP initSEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP, SEXP tolSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type init(initSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(getroot_K1_fast_Poi(init, mu, g, q, gNA, gNB, muNA, muNB, NAmu, NAsigma, tol, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// Get_Saddle_Prob_fast_Poi
Rcpp::List Get_Saddle_Prob_fast_Poi(double zeta, arma::vec& mu, arma::vec& g, double q, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma, bool logp);
RcppExport SEXP _SAIGE_Get_Saddle_Prob_fast_Poi(SEXP zetaSEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_Saddle_Prob_fast_Poi(zeta, mu, g, q, gNA, gNB, muNA, muNB, NAmu, NAsigma, logp));
    return rcpp_result_gen;
END_RCPP
}
// SPA_survival_fast
Rcpp::List SPA_survival_fast(arma::vec& mu, arma::vec& g, double q, double qinv, double pval_noadj, bool logp, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma, double tol);
RcppExport SEXP _SAIGE_SPA_survival_fast(SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP qinvSEXP, SEXP pval_noadjSEXP, SEXP logpSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type qinv(qinvSEXP);
    Rcpp::traits::input_parameter< double >::type pval_noadj(pval_noadjSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(SPA_survival_fast(mu, g, q, qinv, pval_noadj, logp, gNA, gNB, muNA, muNB, NAmu, NAsigma, tol));
    return rcpp_result_gen;
END_RCPP
}
// sum_arma1
double sum_arma1(arma::vec& X);
RcppExport SEXP _SAIGE_sum_arma1(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_arma1(X));
    return rcpp_result_gen;
END_RCPP
}
// add_logp
double add_logp(double p1, double p2);
RcppExport SEXP _SAIGE_add_logp(SEXP p1SEXP, SEXP p2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< double >::type p2(p2SEXP);
    rcpp_result_gen = Rcpp::wrap(add_logp(p1, p2));
    return rcpp_result_gen;
END_RCPP
}
// arma_sub_cond
arma::vec arma_sub_cond(arma::vec x, arma::uvec iu);
RcppExport SEXP _SAIGE_arma_sub_cond(SEXP xSEXP, SEXP iuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type iu(iuSEXP);
    rcpp_result_gen = Rcpp::wrap(arma_sub_cond(x, iu));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SAIGE_setMarker_GlobalVarsInCPP", (DL_FUNC) &_SAIGE_setMarker_GlobalVarsInCPP, 10},
    {"_SAIGE_setRegion_GlobalVarsInCPP", (DL_FUNC) &_SAIGE_setRegion_GlobalVarsInCPP, 10},
    {"_SAIGE_mainMarkerInCPP", (DL_FUNC) &_SAIGE_mainMarkerInCPP, 4},
    {"_SAIGE_setPLINKobjInCPP", (DL_FUNC) &_SAIGE_setPLINKobjInCPP, 5},
    {"_SAIGE_setBGENobjInCPP", (DL_FUNC) &_SAIGE_setBGENobjInCPP, 5},
    {"_SAIGE_setSAIGEobjInCPP", (DL_FUNC) &_SAIGE_setSAIGEobjInCPP, 23},
    {"_SAIGE_setSparseSigmaInCPP", (DL_FUNC) &_SAIGE_setSparseSigmaInCPP, 3},
    {"_SAIGE_RegionSetUpConditional_binary_InCPP", (DL_FUNC) &_SAIGE_RegionSetUpConditional_binary_InCPP, 0},
    {"_SAIGE_mainRegionInCPP", (DL_FUNC) &_SAIGE_mainRegionInCPP, 9},
    {"_SAIGE_assign_conditionMarkers_factors", (DL_FUNC) &_SAIGE_assign_conditionMarkers_factors, 3},
    {"_SAIGE_assign_conditionMarkers_factors_binary_region", (DL_FUNC) &_SAIGE_assign_conditionMarkers_factors_binary_region, 1},
    {"_SAIGE_SPA", (DL_FUNC) &_SAIGE_SPA, 10},
    {"_SAIGE_SPA_fast", (DL_FUNC) &_SAIGE_SPA_fast, 16},
    {"_SAIGE_Korg_Binom", (DL_FUNC) &_SAIGE_Korg_Binom, 3},
    {"_SAIGE_K1_adj_Binom", (DL_FUNC) &_SAIGE_K1_adj_Binom, 4},
    {"_SAIGE_K2_Binom", (DL_FUNC) &_SAIGE_K2_Binom, 3},
    {"_SAIGE_getroot_K1_Binom", (DL_FUNC) &_SAIGE_getroot_K1_Binom, 6},
    {"_SAIGE_Get_Saddle_Prob_Binom", (DL_FUNC) &_SAIGE_Get_Saddle_Prob_Binom, 5},
    {"_SAIGE_SPA_binary", (DL_FUNC) &_SAIGE_SPA_binary, 7},
    {"_SAIGE_Korg_fast_Binom", (DL_FUNC) &_SAIGE_Korg_fast_Binom, 9},
    {"_SAIGE_K1_adj_fast_Binom", (DL_FUNC) &_SAIGE_K1_adj_fast_Binom, 10},
    {"_SAIGE_K2_fast_Binom", (DL_FUNC) &_SAIGE_K2_fast_Binom, 9},
    {"_SAIGE_getroot_K1_fast_Binom", (DL_FUNC) &_SAIGE_getroot_K1_fast_Binom, 12},
    {"_SAIGE_Get_Saddle_Prob_fast_Binom", (DL_FUNC) &_SAIGE_Get_Saddle_Prob_fast_Binom, 11},
    {"_SAIGE_SPA_binary_fast", (DL_FUNC) &_SAIGE_SPA_binary_fast, 13},
    {"_SAIGE_Korg_Poi", (DL_FUNC) &_SAIGE_Korg_Poi, 3},
    {"_SAIGE_K1_adj_Poi", (DL_FUNC) &_SAIGE_K1_adj_Poi, 4},
    {"_SAIGE_K2_Poi", (DL_FUNC) &_SAIGE_K2_Poi, 3},
    {"_SAIGE_getroot_K1_Poi", (DL_FUNC) &_SAIGE_getroot_K1_Poi, 6},
    {"_SAIGE_Get_Saddle_Prob_Poi", (DL_FUNC) &_SAIGE_Get_Saddle_Prob_Poi, 5},
    {"_SAIGE_SPA_survival", (DL_FUNC) &_SAIGE_SPA_survival, 7},
    {"_SAIGE_Korg_fast_Poi", (DL_FUNC) &_SAIGE_Korg_fast_Poi, 9},
    {"_SAIGE_K1_adj_fast_Poi", (DL_FUNC) &_SAIGE_K1_adj_fast_Poi, 10},
    {"_SAIGE_K2_fast_Poi", (DL_FUNC) &_SAIGE_K2_fast_Poi, 9},
    {"_SAIGE_getroot_K1_fast_Poi", (DL_FUNC) &_SAIGE_getroot_K1_fast_Poi, 12},
    {"_SAIGE_Get_Saddle_Prob_fast_Poi", (DL_FUNC) &_SAIGE_Get_Saddle_Prob_fast_Poi, 11},
    {"_SAIGE_SPA_survival_fast", (DL_FUNC) &_SAIGE_SPA_survival_fast, 13},
    {"_SAIGE_sum_arma1", (DL_FUNC) &_SAIGE_sum_arma1, 1},
    {"_SAIGE_add_logp", (DL_FUNC) &_SAIGE_add_logp, 2},
    {"_SAIGE_arma_sub_cond", (DL_FUNC) &_SAIGE_arma_sub_cond, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_SAIGE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
